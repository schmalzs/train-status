var map, oms, openwindow = new L.Popup;
function initMap() {
  map = L.map("map_canvas", {
    minZoom: 4,
    maxZoom: 15,
    zoom: 5,
    fullscreenControl: !0,
    center: new L.LatLng(39.5,-96.1)
  });
  var t = L.mapboxGL({
    accessToken: "{token}",
    style: "https://asm.transitdocs.com/styles/asm.json"
  }).addTo(map);
  map.attributionControl.setPrefix(!1),
    map.attributionControl.addAttribution("&copy;&nbsp;<a href='https://openmaptiles.org/'>OpenMapTiles</a>&nbsp;<a href='https://www.openstreetmap.org/copyright'>OpenStreetMap contributors</a>");
  var a, e = {
    rendererFactory: L.canvas.tile,
    buffer: 750,
    pane: "stations",
    vectorTileLayerStyles: {
      sliced: {
        icon: new L.Icon.Default
      }
    }
  };
  map.createPane("stations"),
    map.getPane("stations").style.zIndex = 550,
    $.getJSON("https://asm.transitdocs.com/js/stations.json", function(t) {
      a = L.vectorGrid.slicer(t, e)
    }),
    map.on("zoomend", function() {
      t._update(),
        map.getZoom() >= 9 ? map.hasLayer(a) || map.addLayer(a) : map.hasLayer(a) && map.removeLayer(a)
    }),
    (oms = new OverlappingMarkerSpiderfier(map,{
      keepSpiderfied: !0,
      legWeight: 0,
      circleSpiralSwitchover: 1 / 0
    })).addListener("click", function(t) {
      openwindow.setContent(t.desc),
        openwindow.setLatLng(t.getLatLng()),
        map.openPopup(openwindow)
    }),
    oms.addListener("spiderfy", function(t) {
      map.getZoom() < 8 && oms.unspiderfy(),
        map.closePopup()
    }),
    oms.addListener("unspiderfy", function(t) {
      map.closePopup()
    })
}
function load(t, a, e, s) {
  $.getJSON("https://asm.transitdocs.com/api/trainDetail.php", {
    year: t,
    month: a,
    day: e,
    train: s
  }, function(n) {
    if ("stations"in n) {
      document.title = "Amtrak " + s + " (" + a + "/" + e + ")",
        $("#title").text(n.name);
      for (var r = $("#trainDetailB"), p = "", i = 0; i < n.stations.length; i++) {
        var d = n.stations[i]
          , o = $("<tr>")
          , l = $("<td>");
        l.text(d.miles.toString()),
          o.append(l);
        var m = $("<td>");
        m.text(d.code),
          o.append(m);
        var c = $("<td>").addClass("stationName")
          , h = d.name.split(",")
          , v = $("<a>").attr("href", "https://asm.transitdocs.com/station/" + d.code).attr("target", "_blank").addClass("stationLink");
        if (v.text(h[0] + ", " + h[1].split(" ")[1]),
          c.append(v),
        h[1].split(" ").length > 2) {
          subNameSpan = $("<span>"),
            subNameSpan.addClass("subname"),
            subNameSpan.html("<br>");
          var _ = h[1].split(" ", 2)[1].length;
          subNameSpan.append(h[1].substr(_ + 1).trim()),
            c.append(subNameSpan)
        }
        o.append(c);
        var g = $("<td>");
        if (0 === i) {
          h = d.sch_dep.split("/");
          $("#subtitle").text("Train " + s + " departing " + n.stations[0].name.split(",")[0] + " " + h[0] + "/" + h[1] + "/" + h[2].substr(0, 4)),
            g.text(h[0] + "/" + h[1]),
            p = d.sch_dep.split(" ")[0]
        } else if (i == n.stations.length - 1) {
          h = d.sch_arr.split("/");
          g.text(h[0] + "/" + h[1]),
            p = d.sch_arr.split(" ")[0]
        } else {
          var u = "";
          "sch_arr"in d && (u = d.sch_arr.split(" ")[0]);
          var b = d.sch_dep.split(" ")[0];
          "" === u && (u = b);
          var f = "";
          if (f = "sch_arr"in n.stations[i + 1] ? n.stations[i + 1].sch_arr.split(" ")[0] : n.stations[i + 1].sch_dep.split(" ")[0],
          b != u) {
            var C = d.sch_arr.split("/")
              , w = d.sch_dep.split("/");
            g.text(C[0] + "/" + C[1]),
              g.append("<br>" + w[0] + "/" + w[1])
          } else if (b != p || b != f) {
            h = d.sch_dep.split("/");
            g.text(h[0] + "/" + h[1])
          }
          p = b
        }
        g.addClass("smallMiddle"),
          o.append(g);
        var S = $("<td>");
        0 !== i && i != n.stations.length - 1 && d.tz == n.stations[i - 1].tz && d.tz == n.stations[i + 1].tz || S.text(d.tz),
          S.addClass("smallMiddle"),
          o.append(S);
        var y = $("<td>");
        0 === i ? y.text("Dp") : i == n.stations.length - 1 ? y.text("Ar") : "sch_arr"in d && y.html("Ar<br>Dp"),
          y.addClass("smallMiddle"),
          o.append(y);
        var x = $("<td>");
        if ("sch_arr"in d) {
          var D = d.sch_arr.split(" ")[1];
          (k = $("<span>")).text(D.substr(0, D.length - 1)),
          "PM" == D.substr(-2) && k.addClass("pmTime"),
            x.append(k)
        }
        if ("sch_dep"in d) {
          "sch_arr"in d && x.append("<br>");
          var k;
          D = d.sch_dep.split(" ")[1];
          (k = $("<span>")).text(D.substr(0, D.length - 1)),
          "PM" == D.substr(-2) && k.addClass("pmTime"),
            x.append(k)
        }
        s > 2e3 && s < 2300 ? x.addClass("acela") : n.miles < 750 ? x.addClass("corridor") : x.addClass("longdistance"),
          o.append(x);
        var M = $("<td>")
          , T = $("<td>");
        T.addClass("commentText");
        var P = !1;
        if ("act_arr"in d) {
          P = !0;
          D = d.act_arr.split(" ")[1];
          (A = $("<span>")).text(D.substr(0, D.length - 1)),
          "PM" == D.substr(-2) && A.addClass("pmTime"),
          "act_dep"in d || "est_dep"in d || (d.arr_otp <= -6 * n.thresh ? M.addClass("badlyLate") : d.arr_otp <= -2 * n.thresh ? M.addClass("veryLate") : d.arr_otp <= -1 * n.thresh ? M.addClass("late") : M.addClass("onTime")),
            M.append(A),
            T.append("Arrived " + otpString(d.arr_otp)),
          !("act_dep"in d) && !("est_dep"in d) && "sch_dep"in d && "sch_arr"in d && (M.append("<br>&nbsp;"),
            T.append("<br>&nbsp;"))
        }
        if ("act_dep"in d) {
          P = !0,
          "act_arr"in d && (M.append("<br>"),
            T.append("<br>"));
          var A;
          D = d.act_dep.split(" ")[1];
          (A = $("<span>")).text(D.substr(0, D.length - 1)),
          "PM" == D.substr(-2) && A.addClass("pmTime"),
            d.dep_otp <= -6 * n.thresh ? M.addClass("badlyLate") : d.dep_otp <= -2 * n.thresh ? M.addClass("veryLate") : d.dep_otp <= -1 * n.thresh ? M.addClass("late") : M.addClass("onTime"),
            M.append(A),
            T.append("Departed " + otpString(d.dep_otp))
        }
        if ("est_arr"in d) {
          P = !0;
          D = d.est_arr.split(" ")[1];
          (z = $("<span>")).text(D.substr(0, D.length - 1)),
          "PM" == D.substr(-2) && z.addClass("pmTime"),
            z.addClass("estimate"),
            M.append(z),
            estCmtSpan = $("<span>"),
            estCmtSpan.html("Estimated to arrive " + otpString(d.earr_otp)),
            estCmtSpan.addClass("estimate"),
            T.append(estCmtSpan),
          "est_dep"in d || (d.earr_otp <= -6 * n.thresh ? M.addClass("badlyLate") : d.earr_otp <= -2 * n.thresh ? M.addClass("veryLate") : d.earr_otp <= -1 * n.thresh ? M.addClass("late") : M.addClass("onTime"),
          "sch_dep"in d && (M.append("<br>&nbsp;"),
            T.append("<br>&nbsp;")))
        }
        if ("est_dep"in d) {
          P = !0,
          ("est_arr"in d || "act_arr"in d) && (M.append("<br>"),
            T.append("<br>"));
          var z;
          D = d.est_dep.split(" ")[1];
          (z = $("<span>")).text(D.substr(0, D.length - 1)),
          "PM" == D.substr(-2) && z.addClass("pmTime"),
            M.append(z),
            z.addClass("estimate"),
            estCmtSpan = $("<span>"),
            estCmtSpan.html("Estimated to depart " + otpString(d.edep_otp)),
            estCmtSpan.addClass("estimate"),
            T.append(estCmtSpan),
            d.edep_otp <= -6 * n.thresh ? M.addClass("badlyLate") : d.edep_otp <= -2 * n.thresh ? M.addClass("veryLate") : d.edep_otp <= -1 * n.thresh ? M.addClass("late") : M.addClass("onTime")
        }
        P || M.addClass("noData"),
          o.append(M),
          o.append(T);
        var N = $("<td>")
          , Z = $("<a>").attr("href", "https://asm.transitdocs.com/station/" + d.code).attr("target", "_blank").text("Station").addClass("stationLink")
          , B = new Date;
        B.setDate(B.getDate() - 60);
        var O = "https://juckins.net/amtrak_status/archive/html/historychart.php?train_num=";
        O += s,
          O += "&station=",
          O += d.code,
          O += "&date_start=",
          O += B.getMonth() + 1 + "/" + B.getDate() + "/" + B.getFullYear(),
          O += "&date_end=",
          O += a + "/" + e + "/" + t,
        i == n.stations.length - 1 && (O += "&sort=d_ar");
        var V = $("<a>").attr("href", O).attr("target", "_blank").attr("rel", "noopener").addClass("ASMADlink").text("History");
        N.append($("<div>").append(Z).addClass("viewLinks")),
          N.append($("<div>").append(V).addClass("viewLinks")),
          o.append(N),
          o.appendTo(r)
      }
      if ($("#trainDetail").append(r),
        $("#trainDetail").css("visibility", "visible"),
        window.scrollTo(0, 0),
      n.points.length > 0) {
        $("#loc_header").text("Location History"),
        n.age < 43200 && $("#loc_warning").text("Last updated " + n.update_time),
          initMap();
        var j, I = [];
        for (i = 0; i < n.points.length; i++) {
          var E = $("<div>");
          d = n.points[i];
          E.text(d.time + " " + d.tz + "T"),
            E.append("<br>"),
            E.append(d.speed.toString() + "mph"),
          0 !== d.speed && void 0 !== d.heading && E.append("&nbsp;" + d.heading),
          void 0 !== d.message && (E.append("<br>"),
            E.append(d.message));
          var G = L.icon({
            iconUrl: "https://asm.transitdocs.com/markers/speed/" + Math.min(Math.round(d.speed, 0), 149).toString() + ".png",
            iconAnchor: [10, 10]
          })
            , F = new L.Marker([d.coordinates[0], d.coordinates[1]]);
          F.setIcon(G),
            F.desc = E.html(),
            F.addTo(map),
            oms.addMarker(F),
            I.push(F),
            j = new L.featureGroup(I).getBounds()
        }
        try {
          map.fitBounds(j.pad(.1)),
          n.points.length >= 5 && (map.setMaxBounds(j.pad(.25)),
            map.setMinZoom(map.getBoundsZoom(j.pad(.1))))
        } catch (t) {}
        var H = "http://asm.transitdocs.com/public_api/location_history_csv.php?train=";
        H += s,
          H += "&year=",
          H += t,
          H += "&month=",
          H += pad2(a),
          H += "&day=",
          H += pad2(e);
        var J = $("<span>").attr("id", "dlLink");
        J.append($("<a>").attr("href", H).attr("target", "_blank").append($("<img>").attr("src", "https://asm.transitdocs.com/img/download_icon.png")).append("Download location history")),
          $("#footer").prepend(J)
      } else
        $("#map_canvas").remove(),
          $("#divider").remove(),
          $("#loc_warning").remove();
      var U = "http://www.statusmaps.com/cgi-bin/gettrain.pl?seltrain=";
      U += s,
        U += "&selyear=",
        U += t,
        U += "&selmonth=",
        U += pad2(a),
        U += "&selday=",
        U += pad2(e);
      var W = $("<span>").attr("id", "dixieLink");
      W.append($("<a>").attr("href", U).attr("target", "_blank").attr("rel", "noopener").append($("<img>").attr("src", "https://asm.transitdocs.com/img/dixieland_icon.png")).append("View on statusmaps.com")),
        $("#footer").prepend(W);
      var Y = n.miles < 750 ? "Corridor" : "LongDistance";
      $("#dixieLink").click(function() {
        ga("send", "event", "ViewStatus", "ToDixieland", Y, {
          dimension1: s
        })
      }),
        $("#dlLink").click(function() {
          ga("send", "event", "Download", "CSVExport", Y, {
            dimension1: s
          })
        }),
        $(".ASMADlink").click(function() {
          ga("send", "event", "ViewStatus", "ASMAD", Y, {
            dimension1: s
          })
        }),
        $(".stationLink").click(function() {
          ga("send", "event", "ViewStatus", "Station", Y, {
            dimension1: s
          })
        })
    } else {
      var q = new Date
        , K = new Date(t,a - 1,e,0,0,0);
      "error"in n ? $("#loc_header").text("System temporarily unavailable, please try again later.") : ($("#loc_header").text("Train " + s + " not found on " + a + "/" + e + "/" + t + "."),
      K.toDateString() == q.toDateString() && $("#loc_header").append(" Perhaps it hasn't departed yet?")),
        $("#trainDetail").remove(),
        $("#map_canvas").remove(),
        $("#divider").remove(),
        $("#title").remove(),
        $("#subtitle").remove(),
        $("#loc_warning").remove()
    }
  })
}
function otpString(t) {
  var a = Math.floor(Math.abs(t) / 60)
    , e = Math.abs(t) - 60 * a;
  return a = 0 !== a ? a.toString() + "&nbsp;hour" + (1 == a ? "" : "s") + "&nbsp;" : "",
    e = 0 !== e ? e.toString() + "&nbsp;minute" + (1 == e ? "" : "s") + "&nbsp;" : "",
    0 === t ? "on time." : t > 0 ? a + e + "early." : a + e + "late."
}
function pad2(t) {
  return t < 10 ? "0" + parseInt(t) : "" + t
}
$(document).ready(function() {
  var t = location.pathname.split("/");
  "" === t[t.length - 1] && t.pop();
  var a = t[t.length - 1]
    , e = t[t.length - 3]
    , s = t[t.length - 2]
    , n = t[t.length - 4];
  if (void 0 !== a && void 0 !== n && void 0 !== e && void 0 !== s) {
    var r = new Date
      , p = new Date(n,e - 1,s,0,0,0)
      , i = new Date(2016,11,10,0,0,0);
    p > r ? ($("#loc_header").text("Cannot search in the future!"),
      $("#trainDetail").remove(),
      $("#map_canvas").remove(),
      $("#divider").remove(),
      $("#title").remove(),
      $("#subtitle").remove(),
      $("#loc_warning").remove()) : p < i ? ($("#loc_header").text("Data not available before Dec 10, 2016."),
      $("#trainDetail").remove(),
      $("#map_canvas").remove(),
      $("#divider").remove(),
      $("#title").remove(),
      $("#subtitle").remove(),
      $("#loc_warning").remove()) : load(n, e, s, a)
  } else
    $("#loc_header").text("")
});
